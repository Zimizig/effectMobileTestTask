//
//  TaskListViewModel.swift
//  effectMobileTestTask
//
//  Created by –†–æ–º–∞–Ω on 09.04.2025.
//

import Foundation
import SwiftUI
import CoreData

@MainActor
final class TaskListViewModel: ObservableObject {
    
    private let context = PersistenceController.shared.container.viewContext
    
    @AppStorage(AppStorageKeys.isFirstLaunch) private var isFirstLaunch: Bool = true
    
    @Published var items: [TaskEntity] = []
    @Published var isLoading = false
    @Published var errorMessage: String? = nil
    
    func loadTasksIfNeeded() async {
        isLoading = true
        errorMessage = nil
        print("üü° loadTasksIfNeeded –≤—ã–∑–≤–∞–Ω")
        
        
        if isFirstLaunch {
            print("üü¢ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –≥—Ä—É–∑–∏–º –∏–∑ —Å–µ—Ç–∏")
            await loadFromNetworkAndSave()
            isFirstLaunch = false
        }
        
        await loadFromCoreData()
        isLoading = false
    }
    
    func loadFromCoreData() async {
        let request: NSFetchRequest<TaskEntity> = TaskEntity.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(keyPath: \TaskEntity.createdAt, ascending: true)]
        
        do {
            let result = try context.fetch(request)
            DispatchQueue.main.async {
                self.items = result
                print("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ CoreData: \(result.count)")
            }
        } catch {
            self.errorMessage = error.localizedDescription
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: \(error)")
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–æ !!!
    func delete(task: TaskEntity) async {
        context.delete(task)
        do {
            try context.save()
            await loadFromCoreData()
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: \(error)")
        }
    }
    
    private func loadFromNetworkAndSave() async {
             //print("üåê –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Å–µ—Ç–∏...")
            do {
                let result = try await NetworkService.shared.fetchTasks()
                //print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ API: \(result.count)")
                for task in result {
                    //print("üìù \(task.todo)")
                    let entity = TaskEntity(context: context)
                    entity.id = UUID()
                    entity.title = task.todo
                    entity.desc = ""
                    entity.isCompleted = task.completed
                    entity.createdAt = Date()
                }
                try context.save()
                //print("‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Core Data.")
            } catch {
                //print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    self.errorMessage = error.localizedDescription
                }
            }
        }
}
